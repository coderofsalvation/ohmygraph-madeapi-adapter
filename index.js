// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = (function() {
    var me;
    me = this;
    this.parse = function(json, version, opts) {
      var cv, cvv, k, kcv, obj, parser, plural, ref, ref1, ref2, type, v;
      if (opts.reftoken == null) {
        opts.reftoken = '$ref';
      }
      if (opts.pathtoken == null) {
        opts.pathtoken = '#';
      }
      if (opts.refprefix == null) {
        opts.refprefix = '';
      }
      opts.version = version;
      this.opts = opts;
      obj = {};
      if (this.v[version] == null) {
        throw new Error({
          msg: "version " + version + " not supported"
        });
      }
      parser = this.v[version];
      parser.patch(json);
      ref1 = json.structure;
      for (k in ref1) {
        v = ref1[k];
        plural = parser.make_plural(k);
        ref = {};
        obj[k] = {};
        if (v.payload != null) {
          parser.set_properties(v, obj[k]);
        }
        parser.set_requestconfig(k, v.access, obj[k], '/id/{' + me.opts.refprefix + k + '.input.id.value}');
        obj[k].type = "object";
        obj[k].output = [];
        obj[k].input = {
          id: {
            type: "integer",
            value: ''
          }
        };
        ref[opts.reftoken] = opts.pathtoken + opts.refprefix + k;
        obj[plural] = {};
        obj[plural].type = "array";
        obj[plural].items = [ref];
        parser.set_requestconfig(k, ["read"], obj[plural]);
        if (v.custom != null) {
          ref2 = v.custom;
          for (type in ref2) {
            cv = ref2[type];
            for (kcv in cv) {
              cvv = cv[kcv];
              if (kcv === "read" || kcv === "update" || kcv === "delete") {
                if (obj[plural].config == null) {
                  obj[plural].config = {};
                }
                parser.add_custom_request(k, type, [kcv], obj[plural], type, cvv);
              }
            }
          }
        }
      }
      return obj;
    };
    this.v = {
      '1.0': {
        patch: function(json) {
          return json = json;
        },
        make_plural: function(str) {
          return String(str + "s").replace(/ys$/, 'ies').replace(/sss$/, 'ss_all');
        },
        set_relations: function(relations, obj) {
          var ref, relation, results, rv;
          results = [];
          for (relation in relations) {
            rv = relations[relation];
            ref = {};
            ref[me.opts.reftoken] = me.opts.pathtoken + me.opts.refprefix + relation;
            results.push(obj.output.push(ref));
          }
          return results;
        },
        set_properties: function(entity, obj) {
          var name, o, pv, ref1, results;
          if (obj.properties == null) {
            obj.properties = {};
          }
          if (entity.payload == null) {
            return;
          }
          ref1 = entity.payload;
          results = [];
          for (name in ref1) {
            pv = ref1[name];
            obj.properties[name] = pv;
            if (pv.resource != null) {
              o = obj.properties[name];
              o = {};
              o[me.opts.reftoken] = me.opts.pathtoken + me.opts.refprefix + pv.resource;
              results.push(obj.properties[name] = o);
            } else {
              results.push(void 0);
            }
          }
          return results;
        },
        set_requestconfig: function(key, methods, obj, slugextra) {
          var _method, customkey, i, j, k, l, len, len1, method, ref1, slug, url, val;
          if (slugextra == null) {
            slugextra = '';
          }
          for (j = 0, len = methods.length; j < len; j++) {
            method = methods[j];
            _method = this.convert_method(method);
            if (key.match('_')) {
              customkey = key.split('_');
              customkey.shift();
              return this.add_custom_request(key, method, methods, obj, slugextra);
            }
            slug = key.replace(/_/g, '/');
            url = this.get_url(slug + slugextra);
            if (!obj.request) {
              obj.request = {};
            }
            obj.request[method] = {
              config: {
                method: _method,
                url: url,
                payload: {}
              }
            };
            if (obj.type === "array") {
              ref1 = [
                {
                  sort: "weight"
                }, {
                  limit: 20
                }, {
                  offset: 0
                }
              ];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                i = ref1[l];
                k = Object.keys(i)[0];
                val = i[k];
                if (obj.input == null) {
                  obj.input = {};
                }
                obj.input[k] = val;
                obj.request[method].config.payload[k] = '{' + this.make_plural(key) + ".input." + k + '}';
              }
            }
          }
        },
        add_custom_request: function(key, customkey, methods, obj, slugextra, customobj) {
          var j, len, method, payload, qk, qv, ref1, reqobj, results, slug, url;
          if (slugextra == null) {
            slugextra = '';
          }
          results = [];
          for (j = 0, len = methods.length; j < len; j++) {
            method = methods[j];
            method = this.convert_method(method);
            slug = key.replace(/_/g, '/');
            url = this.get_url(slug + (slugextra.length ? '/' + slugextra : ''));
            if (!obj.request) {
              obj.request = {};
            }
            obj.request[customkey] = {
              config: {
                method: method,
                url: url,
                payload: {}
              }
            };
            if (customobj && (customobj["arguments"] != null)) {
              reqobj = obj.request[customkey];
              if (obj.input == null) {
                obj.input = {};
              }
              if (obj.input[customkey] == null) {
                obj.input[customkey] = {};
              }
              reqobj.config.payload = customobj["arguments"];
              if (reqobj.config.payload.query != null) {
                payload = reqobj.config.payload;
                ref1 = payload.query;
                for (qk in ref1) {
                  qv = ref1[qk];
                  qv.value = (qv["default"] != null ? qv["default"] : '');
                  obj.input[qk] = qv.value;
                  payload[qk] = '{' + (obj.type === "array" ? this.make_plural(key) : key) + ".input." + qk + '}';
                }
                results.push(delete payload.query);
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          }
          return results;
        },
        get_url: function(slug) {
          return '/v' + me.opts.version.replace(/\..*/, '') + '/' + slug;
        },
        convert_method: function(method) {
          if (method === "read") {
            method = "get";
          }
          if (method === "post") {
            method = "post";
          }
          if (method === "update") {
            method = "update";
          }
          if (method === "delete") {
            method = "delete";
          }
          return method;
        }
      }
    };
    return this;
  }).apply({});

}).call(this);
